(ns dumeng.excel
  (:require
    [clojure.string :as str]
    ["exceljs" :as excel]
    ["os" :as os]
    ["path" :as path]
    ["process" :as process]
    [dumeng.logger :refer [log]]
    [dumeng.editor :refer [get-edit-type]]
    [oops.core :refer [oget oset! ocall]]))

(declare add-class-info-sheet)
(declare add-attribute-sheet)
(declare add-note-sheet)

(def Workbook (oget excel "Workbook"))

(defn write-excel!
  [data & {:keys [out-file] }]
  (let [wb (Workbook.)
        out-file (or out-file (ocall path "join"
                                     (ocall process "cwd") "temp/UML_metamodel.xlsx"))]
    (do
      #_(oset! wb "creator" (-> os
                                (ocall "userInfo")
                                (oget "username")))
      (add-class-info-sheet wb data)
      (add-attribute-sheet wb data)
      (add-note-sheet wb data)
      ;; TODO: use `go` to do async stuff
      (ocall (oget wb "xlsx") "writeFile"
             out-file)
      (log (str "data is write into " out-file)))))

(defn- set-value-at! [row i v]
  (let [cell (.getCell ^js row i)]
    (set! (.-value ^js cell) v)))

(defn add-class-info-sheet
  [^js wb data]
  (let [sheet (.addWorksheet wb "UML classes")]
    (doseq [[i cls] (map-indexed vector data)]
      (let [row (.getRow ^js sheet (+ i 1))]
        (doto row
          (set-value-at! 1 (:class-name cls))
          (set-value-at! 2 (:comment cls)))))))

(def headers ["className",
              "attributeName",
              "comment",
              "type",
              "multiplicity",
              "isReadOnly",
              "isDerived"
              "isDerivedUnion",
              "editType"])

(defn add-attribute-sheet
  [^js wb data]
  (let [^js sheet (.addWorksheet wb "UML Attributes")
        header-row (.getRow sheet 1)
        idx (atom 2)
        ;; get all attributes in an xmi entity
        entity-attrs (->> (map #(->> % :attributes (map keys) flatten) data)
                          flatten
                          set
                          (into [])
                          (remove (fn [x] (some #(= x %) [:name :xmi:type :xmi:id
                                                          :entity/type :db/id :owner
                                                          :comment :multiplicity
                                                          :type]))))
        hs (into []
                 (distinct (concat headers (map name entity-attrs))))]
    (do
      (set! (.-columns sheet) (clj->js (map (fn [h] #js{:key h}) hs)))
      ;; add header row
      (doseq [[i x] (map-indexed vector hs)]
        (set-value-at! header-row (inc i) x))
      (doseq [cls data]
        (let [attrs (:attributes cls)]
          (doseq [attr attrs]
            (let [row (.getRow sheet @idx)]
              (doto row
                (set-value-at! "className" (:class-name cls))
                (set-value-at! "attributeName" (:name attr))
                (set-value-at! "comment" (:comment attr))
                (set-value-at! "multiplicity" (str
                                                (get-in attr [:multiplicity :lower])
                                                ".."
                                                (get-in attr [:multiplicity :upper])))
                (set-value-at! "type" (if-let [t (:type attr)]
                                        (last (str/split t #"#")))))
              (doseq [k entity-attrs]
                (set-value-at! row (name k) (k attr)))
              #_(doseq [^js k ["isReadOnly" "isDerived" "isDerivedUnion"]]
                  (set-value-at! row k (get attr (keyword k))))
              (set-value-at! row "editType" (name (get-edit-type attr)))
              (swap! idx inc))))))))

(defn add-note-sheet
  [^js wb _]
  (let [sheet (.addWorksheet wb "note")
        row (.getRow ^js sheet 1)
        cell (.getCell ^js row 1)]
    (set! (.-value cell)
          "The data in 'UML classes' sheet is auto-generated by script. Manually edits may be overwritten.")))